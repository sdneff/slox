// WARNING! this code was generated by a tool

using Slox.Scanning;

#nullable enable

namespace Slox.Syntax;

public abstract record Expr
{
    public abstract T Accept<T>(IVisitor<T> visitor);

    public interface IVisitor<T>
    {
        T VisitBinaryExpr(Binary expr);
        T VisitGroupingExpr(Grouping expr);
        T VisitLiteralExpr(Literal expr);
        T VisitVariableExpr(Variable expr);
        T VisitUnaryExpr(Unary expr);
    }

    public record Binary(Expr Left, Token Operator, Expr Right) : Expr()
    {
        public override T Accept<T>(IVisitor<T> visitor) => visitor.VisitBinaryExpr(this);
    }

    public record Grouping(Expr Expression) : Expr()
    {
        public override T Accept<T>(IVisitor<T> visitor) => visitor.VisitGroupingExpr(this);
    }

    public record Literal(object? Value) : Expr()
    {
        public override T Accept<T>(IVisitor<T> visitor) => visitor.VisitLiteralExpr(this);
    }

    public record Variable(Token Name) : Expr()
    {
        public override T Accept<T>(IVisitor<T> visitor) => visitor.VisitVariableExpr(this);
    }

    public record Unary(Token Operator, Expr Right) : Expr()
    {
        public override T Accept<T>(IVisitor<T> visitor) => visitor.VisitUnaryExpr(this);
    }

}
