using System;
using System.IO;
using System.Text;

namespace Slox.Tool;

public static class AstGenerator
{
    public static Task DefineAst(DirectoryInfo outputDir, string baseName, IList<string> types)
    {
        var sb = new StringBuilder();

        sb.AppendLine(@$"// WARNING! this code was generated by a tool

using Slox.Scanning;

#nullable enable

namespace Slox.Syntax;

public abstract record {baseName}
{{
");

        foreach (var type in types)
        {
            var t = TypeDescriptor.Parse(type);
            sb.AppendLine($"    public record {t.Name}({string.Join(", ", t.GetMembers())}) : {baseName}();");
        }

        sb.AppendLine(@"
}");

        return File.WriteAllTextAsync(
            Path.Combine(outputDir.FullName, $"{baseName}.g.cs"),
            sb.ToString(),
            Encoding.UTF8);
    }

    private record TypeDescriptor(string Name, (string, string)[] TypedMembers)
    {
        public IEnumerable<string> GetMembers() => TypedMembers.Select(p => $"{p.Item1} {p.Item2}");

        public static TypeDescriptor Parse(string description)
        {
            // "Name   : T1 Field1, T2 Field2"

            var (name, members) = SplitPair(description, ":");

            var typedMembers = Split(members, ",")
                .Select(m => SplitPair(m, " "));

            return new TypeDescriptor(name, typedMembers.ToArray());
        }

        private static string[] Split(string str, string delim)
        {
            return str.Split(delim, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        }

        private static (string, string) SplitPair(string str, string delim)
        {
            var parts = Split(str, delim);

            return (parts[0], parts[1]);
        }
    }
}